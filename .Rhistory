usethis::use_github()
git pull
#knitr::opts_chunk$set(echo=FALSE, warning=FALSE, error=FALSE, message=FALSE, eval=FALSE,
#                      fig.align='center', fig.height=4, fig.width=6) # no answers
knitr::opts_chunk$set(echo=TRUE, message = FALSE, warning = FALSE, cache = T,
fig.align='center', fig.height=4, fig.width=6) # with answers
library(tidyverse)
#knitr::opts_chunk$set(echo=FALSE, warning=FALSE, error=FALSE, message=FALSE, eval=FALSE,
#                      fig.align='center', fig.height=4, fig.width=6) # no answers
knitr::opts_chunk$set(echo=TRUE, message = FALSE, warning = FALSE, cache = T,
fig.align='center', fig.height=4, fig.width=6) # with answers
library(tidyverse)
library(tidyverse)
# number of trials (n)
n <- 4
# probability of success (p) for a fair coin
p <- 0.5
# possible number of heads (x) and the corresponding probabilities (pmf)
coin_tosses <- data.frame(
'Number_of_Heads' = 0:n,
'Probability' = dbinom(0:n, size = n, prob = p)
)
# PMF plot
ggplot(coin_tosses, aes(x = Number_of_Heads, y = Probability)) +
geom_bar(stat = "identity") +
scale_x_continuous(breaks = 0:n) +
labs(title = "PMF of the Number of Heads in 4 Coin Tosses",
x = "Number of Heads",
y = "Probability")
library(ggplot)
library(ggplot2)
install.packages("tidyverse")
renv::deactivate()
library(ggplot2)
library(ggplot2)
# number of trials (n)
n <- 4
# probability of success (p) for a fair coin
p <- 0.5
# possible number of heads (x) and the corresponding probabilities (pmf)
coin_tosses <- data.frame(
'Number_of_Heads' = 0:n,
'Probability' = dbinom(0:n, size = n, prob = p)
)
# PMF plot
ggplot(coin_tosses, aes(x = Number_of_Heads, y = Probability)) +
geom_bar(stat = "identity") +
scale_x_continuous(breaks = 0:n) +
labs(title = "PMF of the Number of Heads in 4 Coin Tosses",
x = "Number of Heads",
y = "Probability")
# PMF plot
ggplot(coin_tosses, aes(x = Number_of_Heads, y = Probability)) +
geom_bar(stat = "identity") +
scale_x_continuous(breaks = 0:n) +
labs(title = "PMF of the Number of Heads in 4 Coin Tosses",
x = "Number of Heads",
y = "Probability") +
theme_bw()
View(coin_tosses)
paste("e.g. P(X = 1): The probability of getting 1 head (HTTT, THTT, TTHT, TTTH) = ", 4/(2^4))
# Probability
@pishro-nik2014
# Probability
@pishro-nik2014
kable(coin_tosses)
library(kableExtra)
kable(coin_tosses)
kableExtra::kable(coin_tosses)
plot(x = coin_tosses$Number_of_Heads,
y = coin_tosses$Probability, type = "h", lwd = 2, xlab = "x", ylab = "P_X(x)",
main = "Probability Mass Function (PMF)", ylim = c(0, 0.5))
#| label: fig-coin_pmf1
#| fig-cap: "e.g. P(X = 1): The probability of getting 1 head (HTTT, THTT, TTHT, TTTH) = 4/(2^4) = 0.25."
# number of trials (n)
n <- 4
# probability of success (p) for a fair coin
p <- 0.5
# possible number of heads (x) and the corresponding probabilities (pmf)
coin_tosses <- data.frame(
Number_of_Heads = 0:n,
Probability = dbinom(0:n, size = n, prob = p)
)
# PMF plot
plot(x = coin_tosses$Number_of_Heads,
y = coin_tosses$Probability, type = "h", lwd = 2,
main = "Probability Mass Function (PMF)", ylim = c(0, 0.5))
ability Mas
ability Mas
plot(data = coin_tosses, x = Number_of_Heads,
+          y = Probability, type = "h", lwd = 2,
#| label: fig-coin_pmf1
#| fig-cap: "e.g. P(X = 1): The probability of getting 1 head (HTTT, THTT, TTHT, TTTH) = 4/(2^4) = 0.25."
# number of trials (n)
n <- 4
# probability of success (p) for a fair coin
p <- 0.5
# possible number of heads (x) and the corresponding probabilities (pmf)
coin_tosses <- data.frame(Number_of_Heads = 0:n,
Probability = dbinom(0:n, size = n, prob = p))
# PMF plot
plot(coin_tosses$Number_of_Heads, coin_tosses$Probability,
type = "h", lwd = 2,
xlab = "x", ylab = "P(x)",
main = "PMF", ylim = c(0, 0.5))
# number of trials (n)
n <- 4
# probability of success (p) for a fair coin
p <- 0.5
# possible number of heads (x) and the corresponding probabilities (pmf)
coin_tosses <- data.frame(Number_of_Heads = 0:n,
Probability = dbinom(0:n, size = n, prob = p))
# PMF plot
plot(coin_tosses$Number_of_Heads, coin_tosses$Probability,
type = "h", lwd = 2,
xlab = "x", ylab = "P(x)",
main = "PMF", ylim = c(0, 0.5))
#| label: fig-coin_pmf1
#| fig-cap: "e.g. P(X = 1): The probability of getting 1 head (HTTT, THTT, TTHT, TTTH) = 4/(2^4) = 0.25."
# number of trials (n)
n <- 4
# probability of success (p) for a fair coin
p <- 0.5
# possible number of heads (x) and the corresponding probabilities (pmf)
coin_tosses <- data.frame(Number_of_Heads = 0:n,
Probability = dbinom(0:n, size = n, prob = p))
# PMF plot
plot(coin_tosses$Number_of_Heads, coin_tosses$Probability,
type = "h", lwd = 2,
xlab = "x", ylab = "P(x)",
main = "PMF", ylim = c(0, 0.5))
plot(coin_tosses$Number_of_Heads, coin_tosses$Probability,
type = "h", lwd = 1,
xlab = "x", ylab = "P(x)",
main = "PMF", ylim = c(0, 0.5))
plot(coin_tosses$Number_of_Heads, coin_tosses$Probability,
type = "h", lwd = 3,
xlab = "x", ylab = "P(x)",
main = "PMF", ylim = c(0, 0.5))
sum(coin_tosses$Probability)
coin_tosses$cdf <- cumsum(coin_tosses$Probability)
View(coin_tosses)
coin_tosses$cdf <- cumsum(coin_tosses$Probability)
plot(coin_tosses$Number_of_Heads, coin_tosses$cdf,
type = 's', bty = "l",
xlab = 'x', ylab = 'cumulative probability',
main = 'Cumulative distribution function')
plot(coin_tosses$Number_of_Heads, coin_tosses$cdf,
type = 's', bty = "l",
xlab = 'x', ylab = 'cumulative probability',
main = 'Cumulative distribution function')
abline(h = 1, lty = 2)
#| label: fig-coin_pmf1
#| fig-cap: "e.g. P(X = 1): The probability of getting 1 head (HTTT, THTT, TTHT, TTTH) = 4/(2^4) = 0.25."
# number of trials (n)
n <- 4
# probability of success (p) for a fair coin
p <- 0.5
# possible number of heads (x) and the corresponding probabilities (pmf)
coin_tosses <- data.frame(Number_of_Heads = 0:n,
Probability = dbinom(0:n, size = n, prob = p))
# PMF plot
plot(coin_tosses$Number_of_Heads, coin_tosses$Probability,
type = "h", lwd = 3,
xlab = "x", ylab = "P(x)",
main = "PMF", ylim = c(0, 0.5))
#| label: fig-coin_pmf1
#| fig-cap: "e.g. P(X = 1): The probability of getting 1 head (HTTT, THTT, TTHT, TTTH) = 4/(2^4) = 0.25."
# number of trials (n)
n <- 4
# probability of success (p) for a fair coin
p <- 0.5
# possible number of heads (x) and the corresponding probabilities (pmf)
coin_tosses <- data.frame(Number_of_Heads = 0:n,
Probability = dbinom(0:n, size = n, prob = p))
# PMF plot
plot(coin_tosses$Number_of_Heads, coin_tosses$Probability,
type = "h", lwd = 3,
xlab = "x", ylab = "P(x)",
main = "Probability Mass Function (PMF)")
coin_tosses$cdf <- cumsum(coin_tosses$Probability)
plot(coin_tosses$Number_of_Heads, coin_tosses$cdf,
type = 's', bty = "l",
xlab = 'x', ylab = 'cumulative probability',
main = 'Cumulative distribution function (CDF)')
abline(h = 1, lty = 2)
#| label: fig-coin_pmf1
#| fig-cap: "e.g. P(X = 1): The probability of getting 1 head (HTTT, THTT, TTHT, TTTH) = 4/(2^4) = 0.25."
# number of trials (n)
n <- 4
# probability of success (p) for a fair coin
p <- 0.5
# possible number of heads (x) and the corresponding probabilities (pmf)
coin_tosses <- data.frame(Number_of_Heads = 0:n,
Probability = dbinom(0:n, size = n, prob = p))
# PMF plot
plot(coin_tosses$Number_of_Heads, coin_tosses$Probability,
type = "h", lwd = 3,
xlab = "x", ylab = "probability",
main = "Probability Mass Function (PMF)")
# option 1
cdf1 = pbinom(q = omega, size = n, prob = p)
n = 5; p = 0.5
omega = 0:n
pmf = dbinom(x = omega, size = n, prob = p)
bin.distr = data.frame(x = omega, pmf)
bin.distr
# option 1
cdf1 = pbinom(q = omega, size = n, prob = p)
# option 2
cdf2 = cumsum(pmf)
cdf1 = cdf2
cdf1 = cdf2
cdf1 = pbinom(q = omega, size = n, prob = p)
cdf2 = cumsum(pmf)
cdf1 == cdf2
cdf1; cdf2
round(cdf1, 5) == round(cdf2, 5)
round(cdf1, 10) == round(cdf2, 10)
cdf1 == cdf2
all(round(cdf1, 10) == round(cdf2, 10))
#| label: fig-bin.dist
#| fig-cap: Corresponding PMF and CDF
#| layout-ncol: 2
plot(bin.distr, pch = 16, bty = "l", col = 'steelblue2',
main = 'Probability mass function')
plot(omega, cdf1, type = 's', bty = "l",
xlab = 'x', ylab = 'cumulative probability',
col = 'steelblue2', lwd = 2,
main = 'Cumulative distribution function')
abline(h = 1, lty = 2)
set.seed(1234)
random.exp <- function(n, lam) {
u <- runif(n)
- log(1 - u) / lam
}
x <- random.exp(1e6, 3)
mean(x)
var(x) # E(X) if X~exp is 1/lam and var(x) should be 1/(lam^2)
hist(x, 50, prob = T)
curve(3 * exp(-3 * x), add = TRUE, col = 'red', lwd = 2)
paste("Mean =", `r mean(x)`, "and variance", `r var(x)`, "E(X) if X~exp is 1/lam and var(x) should be 1/(lam^2)")
