usethis::use_github()
git pull
#knitr::opts_chunk$set(echo=FALSE, warning=FALSE, error=FALSE, message=FALSE, eval=FALSE,
#                      fig.align='center', fig.height=4, fig.width=6) # no answers
knitr::opts_chunk$set(echo=TRUE, message = FALSE, warning = FALSE, cache = T,
fig.align='center', fig.height=4, fig.width=6) # with answers
library(tidyverse)
#knitr::opts_chunk$set(echo=FALSE, warning=FALSE, error=FALSE, message=FALSE, eval=FALSE,
#                      fig.align='center', fig.height=4, fig.width=6) # no answers
knitr::opts_chunk$set(echo=TRUE, message = FALSE, warning = FALSE, cache = T,
fig.align='center', fig.height=4, fig.width=6) # with answers
library(tidyverse)
library(tidyverse)
# number of trials (n)
n <- 4
# probability of success (p) for a fair coin
p <- 0.5
# possible number of heads (x) and the corresponding probabilities (pmf)
coin_tosses <- data.frame(
'Number_of_Heads' = 0:n,
'Probability' = dbinom(0:n, size = n, prob = p)
)
# PMF plot
ggplot(coin_tosses, aes(x = Number_of_Heads, y = Probability)) +
geom_bar(stat = "identity") +
scale_x_continuous(breaks = 0:n) +
labs(title = "PMF of the Number of Heads in 4 Coin Tosses",
x = "Number of Heads",
y = "Probability")
library(ggplot)
library(ggplot2)
install.packages("tidyverse")
renv::deactivate()
library(ggplot2)
library(ggplot2)
# number of trials (n)
n <- 4
# probability of success (p) for a fair coin
p <- 0.5
# possible number of heads (x) and the corresponding probabilities (pmf)
coin_tosses <- data.frame(
'Number_of_Heads' = 0:n,
'Probability' = dbinom(0:n, size = n, prob = p)
)
# PMF plot
ggplot(coin_tosses, aes(x = Number_of_Heads, y = Probability)) +
geom_bar(stat = "identity") +
scale_x_continuous(breaks = 0:n) +
labs(title = "PMF of the Number of Heads in 4 Coin Tosses",
x = "Number of Heads",
y = "Probability")
# PMF plot
ggplot(coin_tosses, aes(x = Number_of_Heads, y = Probability)) +
geom_bar(stat = "identity") +
scale_x_continuous(breaks = 0:n) +
labs(title = "PMF of the Number of Heads in 4 Coin Tosses",
x = "Number of Heads",
y = "Probability") +
theme_bw()
View(coin_tosses)
paste("e.g. P(X = 1): The probability of getting 1 head (HTTT, THTT, TTHT, TTTH) = ", 4/(2^4))
# Probability
@pishro-nik2014
# Probability
@pishro-nik2014
kable(coin_tosses)
library(kableExtra)
kable(coin_tosses)
kableExtra::kable(coin_tosses)
plot(x = coin_tosses$Number_of_Heads,
y = coin_tosses$Probability, type = "h", lwd = 2, xlab = "x", ylab = "P_X(x)",
main = "Probability Mass Function (PMF)", ylim = c(0, 0.5))
#| label: fig-coin_pmf1
#| fig-cap: "e.g. P(X = 1): The probability of getting 1 head (HTTT, THTT, TTHT, TTTH) = 4/(2^4) = 0.25."
# number of trials (n)
n <- 4
# probability of success (p) for a fair coin
p <- 0.5
# possible number of heads (x) and the corresponding probabilities (pmf)
coin_tosses <- data.frame(
Number_of_Heads = 0:n,
Probability = dbinom(0:n, size = n, prob = p)
)
# PMF plot
plot(x = coin_tosses$Number_of_Heads,
y = coin_tosses$Probability, type = "h", lwd = 2,
main = "Probability Mass Function (PMF)", ylim = c(0, 0.5))
ability Mas
ability Mas
plot(data = coin_tosses, x = Number_of_Heads,
+          y = Probability, type = "h", lwd = 2,
#| label: fig-coin_pmf1
#| fig-cap: "e.g. P(X = 1): The probability of getting 1 head (HTTT, THTT, TTHT, TTTH) = 4/(2^4) = 0.25."
# number of trials (n)
n <- 4
# probability of success (p) for a fair coin
p <- 0.5
# possible number of heads (x) and the corresponding probabilities (pmf)
coin_tosses <- data.frame(Number_of_Heads = 0:n,
Probability = dbinom(0:n, size = n, prob = p))
# PMF plot
plot(coin_tosses$Number_of_Heads, coin_tosses$Probability,
type = "h", lwd = 2,
xlab = "x", ylab = "P(x)",
main = "PMF", ylim = c(0, 0.5))
# number of trials (n)
n <- 4
# probability of success (p) for a fair coin
p <- 0.5
# possible number of heads (x) and the corresponding probabilities (pmf)
coin_tosses <- data.frame(Number_of_Heads = 0:n,
Probability = dbinom(0:n, size = n, prob = p))
# PMF plot
plot(coin_tosses$Number_of_Heads, coin_tosses$Probability,
type = "h", lwd = 2,
xlab = "x", ylab = "P(x)",
main = "PMF", ylim = c(0, 0.5))
#| label: fig-coin_pmf1
#| fig-cap: "e.g. P(X = 1): The probability of getting 1 head (HTTT, THTT, TTHT, TTTH) = 4/(2^4) = 0.25."
# number of trials (n)
n <- 4
# probability of success (p) for a fair coin
p <- 0.5
# possible number of heads (x) and the corresponding probabilities (pmf)
coin_tosses <- data.frame(Number_of_Heads = 0:n,
Probability = dbinom(0:n, size = n, prob = p))
# PMF plot
plot(coin_tosses$Number_of_Heads, coin_tosses$Probability,
type = "h", lwd = 2,
xlab = "x", ylab = "P(x)",
main = "PMF", ylim = c(0, 0.5))
plot(coin_tosses$Number_of_Heads, coin_tosses$Probability,
type = "h", lwd = 1,
xlab = "x", ylab = "P(x)",
main = "PMF", ylim = c(0, 0.5))
plot(coin_tosses$Number_of_Heads, coin_tosses$Probability,
type = "h", lwd = 3,
xlab = "x", ylab = "P(x)",
main = "PMF", ylim = c(0, 0.5))
sum(coin_tosses$Probability)
coin_tosses$cdf <- cumsum(coin_tosses$Probability)
View(coin_tosses)
coin_tosses$cdf <- cumsum(coin_tosses$Probability)
plot(coin_tosses$Number_of_Heads, coin_tosses$cdf,
type = 's', bty = "l",
xlab = 'x', ylab = 'cumulative probability',
main = 'Cumulative distribution function')
plot(coin_tosses$Number_of_Heads, coin_tosses$cdf,
type = 's', bty = "l",
xlab = 'x', ylab = 'cumulative probability',
main = 'Cumulative distribution function')
abline(h = 1, lty = 2)
#| label: fig-coin_pmf1
#| fig-cap: "e.g. P(X = 1): The probability of getting 1 head (HTTT, THTT, TTHT, TTTH) = 4/(2^4) = 0.25."
# number of trials (n)
n <- 4
# probability of success (p) for a fair coin
p <- 0.5
# possible number of heads (x) and the corresponding probabilities (pmf)
coin_tosses <- data.frame(Number_of_Heads = 0:n,
Probability = dbinom(0:n, size = n, prob = p))
# PMF plot
plot(coin_tosses$Number_of_Heads, coin_tosses$Probability,
type = "h", lwd = 3,
xlab = "x", ylab = "P(x)",
main = "PMF", ylim = c(0, 0.5))
#| label: fig-coin_pmf1
#| fig-cap: "e.g. P(X = 1): The probability of getting 1 head (HTTT, THTT, TTHT, TTTH) = 4/(2^4) = 0.25."
# number of trials (n)
n <- 4
# probability of success (p) for a fair coin
p <- 0.5
# possible number of heads (x) and the corresponding probabilities (pmf)
coin_tosses <- data.frame(Number_of_Heads = 0:n,
Probability = dbinom(0:n, size = n, prob = p))
# PMF plot
plot(coin_tosses$Number_of_Heads, coin_tosses$Probability,
type = "h", lwd = 3,
xlab = "x", ylab = "P(x)",
main = "Probability Mass Function (PMF)")
coin_tosses$cdf <- cumsum(coin_tosses$Probability)
plot(coin_tosses$Number_of_Heads, coin_tosses$cdf,
type = 's', bty = "l",
xlab = 'x', ylab = 'cumulative probability',
main = 'Cumulative distribution function (CDF)')
abline(h = 1, lty = 2)
#| label: fig-coin_pmf1
#| fig-cap: "e.g. P(X = 1): The probability of getting 1 head (HTTT, THTT, TTHT, TTTH) = 4/(2^4) = 0.25."
# number of trials (n)
n <- 4
# probability of success (p) for a fair coin
p <- 0.5
# possible number of heads (x) and the corresponding probabilities (pmf)
coin_tosses <- data.frame(Number_of_Heads = 0:n,
Probability = dbinom(0:n, size = n, prob = p))
# PMF plot
plot(coin_tosses$Number_of_Heads, coin_tosses$Probability,
type = "h", lwd = 3,
xlab = "x", ylab = "probability",
main = "Probability Mass Function (PMF)")
# option 1
cdf1 = pbinom(q = omega, size = n, prob = p)
n = 5; p = 0.5
omega = 0:n
pmf = dbinom(x = omega, size = n, prob = p)
bin.distr = data.frame(x = omega, pmf)
bin.distr
# option 1
cdf1 = pbinom(q = omega, size = n, prob = p)
# option 2
cdf2 = cumsum(pmf)
cdf1 = cdf2
cdf1 = cdf2
cdf1 = pbinom(q = omega, size = n, prob = p)
cdf2 = cumsum(pmf)
cdf1 == cdf2
cdf1; cdf2
round(cdf1, 5) == round(cdf2, 5)
round(cdf1, 10) == round(cdf2, 10)
cdf1 == cdf2
all(round(cdf1, 10) == round(cdf2, 10))
#| label: fig-bin.dist
#| fig-cap: Corresponding PMF and CDF
#| layout-ncol: 2
plot(bin.distr, pch = 16, bty = "l", col = 'steelblue2',
main = 'Probability mass function')
plot(omega, cdf1, type = 's', bty = "l",
xlab = 'x', ylab = 'cumulative probability',
col = 'steelblue2', lwd = 2,
main = 'Cumulative distribution function')
abline(h = 1, lty = 2)
set.seed(1234)
random.exp <- function(n, lam) {
u <- runif(n)
- log(1 - u) / lam
}
x <- random.exp(1e6, 3)
mean(x)
var(x) # E(X) if X~exp is 1/lam and var(x) should be 1/(lam^2)
hist(x, 50, prob = T)
curve(3 * exp(-3 * x), add = TRUE, col = 'red', lwd = 2)
paste("Mean =", `r mean(x)`, "and variance", `r var(x)`, "E(X) if X~exp is 1/lam and var(x) should be 1/(lam^2)")
m <- 1000
b <- 500
x0 <- 7
x1 <- b*x0%%m
x2 <- b*x1%%m
m <- 7
b <- 3
x0 <- 2
x1 <- b*x0%%m
x2 <- b*x1%%m
x1 <- (b*x0)%%m
x2 <- (b*x1)%%m
u1 <- x1/m
u2 <- x2/m
X; U <- numeric(10)
X, U <- numeric(10)
X <- numeric(10)
mcrng <- function(m = 7, b = 3, x0 = 2, n = 10){
X <- numeric(n+1)
X[1] <- x0
U <- numeric(n)
for (i in length(X)) {
X[i+1]<- (b*X[i])%%m
U[i]<- X[i+1]
}
}
mcrng()
return(U)
mcrng <- function(m = 7, b = 3, x0 = 2, n = 10){
X <- numeric(n+1)
X[1] <- x0
U <- numeric(n)
for (i in length(X)) {
X[i+1]<- (b*X[i])%%m
U[i]<- X[i+1]
}
return(U)
}
mcrng()
mcrng <- function(m = 7, b = 3, x0 = 2, n = 10){
X <- numeric(n+1)
X[1] <- x0
U <- numeric(n)
for (i in length(X)) {
X[i+1]<- (b*X[i])%%m
U[i]<- X[i+1]/m
}
return(U)
}
mcrng()
for (i in length(U)) {
X[i+1]<- (b*X[i])%%m
U[i]<- X[i+1]/m
}
X <- numeric(10+1)
X[1] <- x0
U <- numeric(10)
for (i in length(U)) {
X[i+1]<- (b*X[i])%%m
U[i]<- X[i+1]/m
}
X[i+1]<- (b*X[i])%%m
for (i in length(U)) {
X[i+1]<- (b*X[i])%%m
}
X[2]<- (b*X[1])%%m
for (i in 1:length(U)) {
X[i+1]<- (b*X[i])%%m
}
for (i in 1:length(U)) {
X[i+1]<- (b*X[i])%%m
U[i]<- X[i+1]/m
}
mcrng <- function(m = 7, b = 3, x0 = 2, n = 10){
X <- numeric(n+1)
X[1] <- x0
U <- numeric(n)
for (i in 1:length(U)) {
X[i+1]<- (b*X[i])%%m
U[i]<- X[i+1]/m
}
return(U)
}
mcrng()
mcrng <- function(m = 30269, b = 171, x0 = 27218, n = 10){
X <- numeric(n+1)
X[1] <- x0
U <- numeric(n)
for (i in 1:length(U)) {
X[i+1]<- (b*X[i])%%m
U[i]<- X[i+1]/m
}
return(U)
}
example5.2 <- mcrng(n = 50)
example5.2
ex1 <- mcrng(m = 30307, b = 172, n = 20, x0 = 17218)
ex1
U <- runif(n =1000)
set.seed(19908)
U <- runif(n =1000)
#(a)
mean(U)
sd(U)
var(U)
#(a)
ex4a <- c(mean(U), sd(U), var(U))
0.5-ex4a[1]
(1/12)^2 - ex4a[2]
(1/12)^2 - ex4a[3]
(1/12)-n ex4a[2]
(1/12)-ex4a[2]
0.5-ex4a[1]
(1/12)^2 - ex4a[3]
(1/12)-ex4a[2]
set.seed(19908)
U <- runif(n =1000)
#(a)
ex4a <- c(mean(U), var(U), sd(U))
0.5-ex4a[1]
(1/12)^2 - ex4a[2]
(1/12)-ex4a[3]
0.5-ex4a[1]
(1/12)^2
(1/12)
(1/12)^2
sqrt(1/12)
0.5-ex4a[1]
(1/12)
sqrt(1/12)
sqrt(1/12) - ex4a[3]
0.5-ex4a[1]
(1/12)-ex4a[2]
sqrt(1/12) - ex4a[3]
0.5
(1/12)
sqrt(1/12)
set.seed(19908)
U <- runif(n =1000)
#(a)
(ex4a <- c(mean(U), var(U), sd(U)))
u <- runif(1000, min = 3.7, max = 5.8)
u <- runif(1000, min = 3.7, max = 5.8)
# true
(3.7+5.8)/2
# est
mean(u)
# est
var(u)
u <- runif(1000, min = 3.7, max = 5.8)
# true
(3.7+5.8)/2
# est
mean(u)
## variance
# true
1/12 * (5.8- 3.7)^2
# est
var(u)
u <- runif(1000, min = 3.7, max = 5.8)
# true
(3.7+5.8)/2
# est
mean(u)
## variance
# true
1/12 * (5.8- 3.7)^2
# est
var(u)
## SD
# true
sqrt(1/12 * (5.8- 3.7)^2)
# est
sd(u)
greater_4 <- u>4
sum(u>4)
sum(u>4)/ 1000
1/(5.8- 3.7)
1/(5.8- 4.0)
(5.8 - 4)/(5.8 - 3.7)
random_mcrng <- function(m, b, x0, n){
x <- numeric(n+1)
x[1] <- x0
for (i in 2:n) {
x[i]<- (b*x[i])%%m
}
u <- x/m
}
U<- random_mcrng(x0 = 207, m = 1307, b = 53, n=10000)
x[i+1]<- (b*x[i])%%m
random_mcrng <- function(m, b, x0, n){
x <- numeric(n+1)
x[1] <- x0
for (i in 2:n) {
x[i+1]<- (b*x[i])%%m
}
u <- x/m
}
U<- random_mcrng(x0 = 207, m = 1307, b = 53, n=10000)
random_mcrng <- function(m, b, x0, n){
x <- numeric(n+1)
x[1] <- x0
for (i in 2:n) {
x[i]<- (b*x[i-1])%%m
}
u <- x/m
}
U<- random_mcrng(x0 = 207, m = 1307, b = 53, n=10000)
hist(U)
